<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd">
    <flow name="scatterGather">
        <scatter-gather doc:name="Scatter-Gather">
            <flow-ref name="getAmericalnFlightsFlow" doc:name="getAmericalnFlightsFlow"/>
            <flow-ref name="getDeltaFlightsFlow" doc:name="getDeltaFlightsFlow"/>
            <flow-ref name="getUnitedFlightsflow" doc:name="getUnitedFlightsflow"/>
        </scatter-gather>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
 
	flatten payload
	 
 ]]></dw:set-payload>
        </dw:transform-message>
        <logger level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="getFlights">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/flights" allowedMethods="GET" doc:name="HTTP"/>
        <set-variable variableName="fname" value="#[message.inboundProperties.'http.query.params'.name]" doc:name="Variable"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars.fname == 'united']">
                <flow-ref name="getUnitedFlightsflow" doc:name="getUnitedFlightsflow"/>
            </when>
            <when expression="#[flowVars.fname == 'delta']">
                <flow-ref name="getDeltaFlightsFlow" doc:name="getDeltaFlightsFlow"/>
            </when>
            <when expression="#[flowVars.fname == 'american']">
                <flow-ref name="getAmericalnFlightsFlow" doc:name="getAmericalnFlightsFlow"/>
            </when>
            <otherwise>
                <flow-ref name="scatterGather" doc:name="scatterGather"/>
            </otherwise>
        </choice>
    </flow>
    <sub-flow name="setCodeSubFlow">
        <set-variable variableName="code" value="#[message.inboundProperties.'http.query.params'.code  == empty ?  'SFO' : message.inboundProperties.'http.query.params'.code  ]" doc:name="setAirportCodeVariable"/>
    </sub-flow>

    <flow name="getUnitedFlightsflow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/united" doc:name="HTTP"/>
        <choice doc:name="Choice">
            <when expression="#[message.inboundProperties.'http.query.params'.code  == empty]">
                <http:request config-ref="United_HTTP_Request_Configuration" path="/essentials/united/flights" method="GET" doc:name="HTTP"/>
                <dw:transform-message doc:name="Transform Message" metadata:id="3161ee52-534e-491d-81bb-d0a3a2258bf5">
                    <dw:input-payload mimeType="application/json"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload.flights map ((flight , indexOfFlight) -> {
	airline: flight.airlineName,
	flightCode: flight.code,
	fromAirportCode: flight.origin,
	toAirportCode: flight.destination,
	departureDate: flight.departureDate,
	emptySeats: flight.emptySeats,
	price: flight.price,
	planeType: flight.planeType
})]]></dw:set-payload>
                </dw:transform-message>
                <logger level="INFO" doc:name="Logger"/>
            </when>
            <when expression="#[message.inboundProperties.'http.query.params'.code  != empty]">
                <flow-ref name="setCodeSubFlow" doc:name="setCodeSubFlow"/>
                <http:request config-ref="United_HTTP_Request_Configuration" path="/essentials/united/flights/{destination}" method="GET" doc:name="UnitedRestRequest">
                    <http:request-builder>
                        <http:uri-param paramName="destination" value="#[flowVars.code]"/>
                    </http:request-builder>
                </http:request>
                <dw:transform-message doc:name="united Transform Message" metadata:id="0134fa83-1402-4fbd-b7cf-e6990d17156c">
                    <dw:input-payload mimeType="application/json"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload.flights map ((flight , indexOfFlight) -> {
	airline: flight.airlineName,
	flightCode: flight.code,
	fromAirportCode: flight.origin,
	toAirportCode: flight.destination,
	departureDate: flight.departureDate,
	emptySeats: flight.emptySeats,
	price: flight.price,
	planeType: flight.planeType
})]]></dw:set-payload>
                </dw:transform-message>
                <logger level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <logger level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <exception-strategy ref="Choice_Exception_Strategy_Gshaik" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="getAmericalnFlightsFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/american" doc:name="HTTP" allowedMethods="GET"/>
        <choice doc:name="Choice">
            <when expression="#[message.inboundProperties.'http.query.params'.code  != empty]">
                <flow-ref name="setCodeSubFlow" doc:name="setCodeSubFlow"/>
                <http:request config-ref="American_HTTP_Request_Configuration" path="/flights" method="GET" doc:name="American rest request">
                    <http:request-builder>
                        <http:query-param paramName="code" value="#[flowVars.code]"/>
                    </http:request-builder>
                </http:request>
                <dw:transform-message doc:name="Transform Message" metadata:id="180503e2-8596-4035-8c15-d904a93342de">
                    <dw:input-payload mimeType="application/json"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload map ((payload01 , indexOfPayload01) -> {
	airline: 'American',
	flightCode: payload01.code,
	fromAirportCode: payload01.origin,
	toAirportCode: payload01.destination,
	departureDate: payload01.departureDate,
	emptySeats: payload01.emptySeats,
	totalSeats: payload01.plane.totalSeats,
	price: payload01.price,
	planeType: payload01.plane.type
})]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <when expression="#[message.inboundProperties.'http.query.params'.code  == empty]">
                <http:request config-ref="American_HTTP_Request_Configuration" path="/flights" method="GET" doc:name="HTTP"/>
                <dw:transform-message doc:name="Transform Message" metadata:id="180503e2-8596-4035-8c15-d904a93342de">
                    <dw:input-payload mimeType="application/json"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload map ((payload01 , indexOfPayload01) -> {
	airline: 'American',
	flightCode: payload01.code,
	fromAirportCode: payload01.origin,
	toAirportCode: payload01.destination,
	departureDate: payload01.departureDate,
	emptySeats: payload01.emptySeats,
	totalSeats: payload01.plane.totalSeats,
	price: payload01.price,
	planeType: payload01.plane.type
})]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <otherwise>
                <logger level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="getDeltaFlightsFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/delta" allowedMethods="GET" doc:name="HTTP"/>
        <choice doc:name="Choice">
            <when expression="#[message.inboundProperties.'http.query.params'.code  == empty]">
                <ws:consumer config-ref="Web_Service_Consumer" operation="listAllFlights" doc:name="Web Service Consumer All"/>
                <dw:transform-message doc:name="Transform Message" metadata:id="ce02f53f-7ea0-4b47-9614-288c1b044f0d">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%namespace ns0 http://soap.training.mulesoft.com/
---
payload.ns0#listAllFlightsResponse.*return map ((return , indexOfReturn) -> {
	airline: return.airlineName,
	flightCode: return.code,
	fromAirportCode: return.origin,
	toAirportCode: return.destination,
	departureDate: return.departureDate,
	emptySeats: return.emptySeats,
	price: return.price,
	planeType: return.planeType
})]]></dw:set-payload>
                </dw:transform-message>
                <logger level="INFO" doc:name="Logger"/>
            </when>
            <when expression="#[message.inboundProperties.'http.query.params'.code  != empty]">
                <flow-ref name="setCodeSubFlow" doc:name="setCodeSubFlow"/>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://soap.training.mulesoft.com/
---
{
	ns0#findFlight: {
		destination: flowVars.code as :string
	}
}]]></dw:set-payload>
                </dw:transform-message>
                <ws:consumer config-ref="Web_Service_Consumer" operation="findFlight" doc:name="Web Service Consumer"/>
                <dw:transform-message doc:name="Transform Message" metadata:id="21db8891-514b-4742-b585-7955a9d01e7d">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%namespace ns0 http://soap.training.mulesoft.com/
---
payload.ns0#findFlightResponse.*return map ((return , indexOfReturn) -> {
	airline: return.airlineName,
	flightCode: return.code,
	fromAirportCode: return.origin,
	toAirportCode: return.destination,
	departureDate: return.departureDate,
	emptySeats: return.emptySeats,
	price: return.price,
	planeType: return.planeType
})]]></dw:set-payload>
                </dw:transform-message>
                <logger level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <logger level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <exception-strategy ref="Choice_Exception_Strategy_Gshaik" doc:name="Copy_of_Reference Exception Strategy"/>
    </flow>

</mule>
